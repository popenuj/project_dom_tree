initialize tree with @root == for first tag != !doctype
@root.parent = nil
split data at newlines
use Regex for two capture groups separating tags and text
  - if opening tag then parent_node = current_node, current_node = ParseTag(tag)
    - pass current_node(now a tag struct) to create node with tag and parent_node
    - call add_child method on parent node (have child count)
  - else if closing tag current_node = current_node.parent
  - else no match data found that means it is a text block only (handle with creating child w/o parsing)


class ParseHTML
initialize new tree
send lines to another method (file.each { |line| deconstruct_line(line) })
  - if opening tag then parent_node = current_node, current_node = ParseTag(tag)
    - pass current_node(now a tag struct) to create node with tag and parent_node
    - call add_child method on parent node (have child count)
  - else if closing tag current_node = current_node.parent
  - else no match data found that means it is a text block only (handle with creating child w/o parsing)

class Node


def tag_start?(tag)
  tag.include?("</")
end

text = "<div>
  div text before
    <p>
      p text
    </p>
    <div>
    more div text
  </div>
  div text after
</div>"


<div>
  div text before
  <p>
    p text
  </p>
  <div>
    more div text
  </div>
  div text after
</div>

                            <div>
   div text before     <p>            <div>        div after text
                      p text      more div text
